{"version":3,"sources":["../utils/index.ts","../routes/cambridge.ts","../index.ts"],"names":["express"],"mappings":"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","sourcesContent":["\nimport cheerio from \"cheerio\";\nimport { Vocab } from '../types/Vocab';\n\n/**\n * Aanlyse the HTML of the page and store the result in the vocab object\n * @param vocab Store the result of the analysis\n * @param response The response from the Axios HTTP request, aka the HTML of the page\n * @returns \n */\nexport const analayse = (vocab: Vocab, response: any)=>{\n\t// TODO: Refactor: Update to newest verion of axios api\n\tconst $ = cheerio.load(response.data);\n\tconst title = $('div.di-title:first>span>span').text();\n\tvocab.title = title;\n\tconst pos = $(\n\t\t'div.posgram.dpos-g.hdib.lmr-5:first span.pos.dpos',\n\t).text();\n\tconst dpos = $(\n\t\t'div.posgram.dpos-g.hdib.lmr-5:first span.gram.dgram',\n\t).text();\n\tvocab.pos = pos;\n\tvocab.dpos = dpos;\n\tconst uk_pron = $('span.uk.dpron-i:first span.ipa.dipa.lpl-1').text();\n\tconst us_pron = $('span.us.dpron-i:first span.ipa.dipa.lpl-1').text();\n\tvocab.uk_pron = uk_pron;\n\tvocab.us_pron = us_pron;\n\t$('div.def-block.ddef_block').each((i, elem) => {\n\t\tconst description = $(elem).find('div.def.ddef_d.db').text();\n\t\tvocab.definitions.push({ description, examples: [] });\n\t\tconst subList = $(elem).find(\n\t\t\t'div.def-body.ddef_b div.examp.dexamp',\n\t\t);\n\t\tif (subList.length !== 0) {\n\t\t\tsubList.each((j, item) => {\n\t\t\t\tvocab.definitions[i].examples.push($(item).text());\n\t\t\t});\n\t\t}\n\t});\n\t$('#dataset-example')\n\t\t.find('div.lbb.lb-cm.lpt-10')\n\t\t.each((i, elem) => {\n\t\t\tconst dataExample = $(elem)\n\t\t\t\t.find('span.deg')\n\t\t\t\t.text()\n\t\t\t\t.trim()\n\t\t\t\t.replace(/\\n/g, '');\n\t\t\tvocab.dataset_examples.push(dataExample);\n\t\t});\n\n\tconsole.log('vocab :>> ', vocab);\n\treturn vocab\n}\n","import express from \"express\"\nconst router = express.Router()\nimport { Response, Request, NextFunction } from \"express\"\nimport { Vocab } from '../types/Vocab';\nimport axios from 'axios';\nimport { analayse } from '../utils/index';\nrouter.get(\"/cambridge\", async (req: Request, res: Response, next: NextFunction) => {\n\tconst word = req.query.q\n\tconst requestURL = `https://dictionary.cambridge.org/dictionary/english/${word}/`;\n\tconst vocab: Vocab = {\n\t\ttitle: '',\n\t\tpos: '',\n\t\tdpos: '',\n\t\tuk_pron: '',\n\t\tus_pron: '',\n\t\tdefinitions: [],\n\t\tdataset_examples: [],\n\t};\n\taxios\n\t\t.get(requestURL, {\n\t\t\theaders: {\n\t\t\t\t'Access-Control-Allow-Origin': '*',\n\t\t\t\t'User-Agent':\n\t\t\t\t\t'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',\n\t\t\t},\n\t\t})\n\t\t.catch((error) => {\n\t\t\t// async error handling\n\t\t\tconsole.log('error from remote server:>> ', error);\n\t\t\tnext(error);\n\t\t})\n\t\t.then((response: any) => {\n\t\t\tif (response.status !== 200) {\n\t\t\t\treturn res.status(503).send('Service unavailable.')\n\t\t\t}\n\t\t\tconst result = analayse(vocab, response);\n\t\t\tconsole.log('result :>> ', result);\n\t\t\tif (result.definitions.length === 0)\n\t\t\t\treturn res.status(404).send('Word not found.')\n\t\t\treturn res.status(200).send(result);\n\t\t});\n})\n\n\nexport default router\n","import express, { Express, NextFunction, Request, Response } from 'express';\nimport cambridge from './routes/cambridge';\nimport cors from 'cors'\nconst routes = [cambridge]\n\nconst app: Express = express();\napp.use(cors())\n\nconst port = 7001;\nroutes.forEach(route => {\n\tapp.use(route)\n})\n\n\napp.get('/', (req: Request, res: Response) => {\n\tres.send('Welcome to Memoraiya Server-side!');\n});\n\n\n// Error Handler\napp.use((err: Error, req: Request, res: Response, next: NextFunction) => {\n\tres.status(500).send(err.message);\n\tnext()\n});\n\napp.listen(port, () => {\n\tconsole.log(`⚡️[server]: Server is running at http://localhost:${port}`);\n});\n\n\n"]}